{"version":3,"sources":["default.jpg","Shaders.js","Filter.js","FilterPage.js","FilterSider.js","App.js","index.js"],"names":["module","exports","shaders","Shaders","create","ORIGINAL","frag","GLSL","CRT","VHS","ShaderMap","reference","shader","FileSaver","require","forwardRef","props","ref","rawImage","useContext","AppContext","useState","surface","setSurface","useImperativeHandle","download","data","captureAsDataURL","saveAs","width","height","r","webglContextAttributes","preserveDrawingBuffer","pixelRatio","shaderName","uniforms","tex","iTime","FilterPage","setRawImage","setWidth","setHeight","curShader","setPixelRatio","filterRef","useRef","handleImageLoaded","base64","image","Image","onload","ratio","Math","max","src","handleBeforeUpload","file","reader","FileReader","readAsDataURL","e","target","result","removeImage","defaultImage","justify","onClick","type","shape","size","icon","DeleteOutlined","current","DownloadOutlined","align","span","Dragger","name","multiple","beforeUpload","className","InboxOutlined","FilterSider","setCurShader","selectedValue","setSelectedValue","onChange","value","Object","keys","useEffect","gutter","Group","map","index","key","Header","Layout","Sider","Content","Footer","React","createContext","App","Provider","theme","mode","defaultSelectedKeys","Item","CameraFilled","style","padding","minHeight","document","documentElement","clientHeight","textAlign","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d6304500.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.7d1f8fbc.jpg\";","import { Shaders, GLSL } from \"gl-react\";\n\nconst shaders = Shaders.create({\n  ORIGINAL: {\n    frag: GLSL`\n              precision mediump float;\n              uniform sampler2D tex;\n              varying vec2 uv;\n      \n              void main()\n              {\n                  vec3 col = texture2D( tex, uv ).xyz;\n                  gl_FragColor = vec4(col, 1.0);\n              }\n          `,\n  },\n  CRT: {\n    frag: GLSL`\n          precision mediump float;\n          uniform sampler2D tex;\n          uniform float iTime;\n          varying vec2 uv;\n  \n          void main()\n          {\n              vec3 oricol = texture2D( tex, uv ).xyz;\n              vec3 col;\n              float x =  sin(0.3*iTime+uv.y*21.0)*sin(0.7*iTime+uv.y*29.0)*sin(0.3+0.33*iTime+uv.y*31.0)*0.0017;\n  \n              col.r = texture2D(tex,vec2(x+uv.x+0.001,uv.y+0.001)).x+0.05;\n              col.g = texture2D(tex,vec2(x+uv.x+0.000,uv.y-0.002)).y+0.05;\n              col.b = texture2D(tex,vec2(x+uv.x-0.002,uv.y+0.000)).z+0.05;\n              col.r += 0.08*texture2D(tex,0.75*vec2(x+0.025, -0.027)+vec2(uv.x+0.001,uv.y+0.001)).x;\n              col.g += 0.05*texture2D(tex,0.75*vec2(x+-0.022, -0.02)+vec2(uv.x+0.000,uv.y-0.002)).y;\n              col.b += 0.08*texture2D(tex,0.75*vec2(x+-0.02, -0.018)+vec2(uv.x-0.002,uv.y+0.000)).z;\n  \n              col = clamp(col*0.6+0.4*col*col*1.0,0.0,1.0);\n  \n              float vig = (0.0 + 1.0*16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y));\n              col *= vec3(pow(vig,0.3));\n  \n              col *= vec3(0.95,1.05,0.95);\n              col *= 2.8;\n  \n              float scans = clamp( 0.35+0.35*sin(3.5*iTime+uv.y*gl_FragCoord.y/uv.y*1.5), 0.0, 1.0);\n              \n              float s = pow(scans,1.7);\n              col = col*vec3( 0.4+0.7*s) ;\n  \n              col *= 1.0+0.01*sin(110.0*iTime);\n              if (uv.x < 0.0 || uv.x > 1.0)\n                  col *= 0.0;\n              if (uv.y < 0.0 || uv.y > 1.0)\n                  col *= 0.0;\n              \n              col*=1.0-0.65*vec3(clamp((mod(gl_FragCoord.x, 2.0)-1.0)*2.0,0.0,1.0));\n              \n              float comp = smoothstep( 0.1, 0.9, sin(iTime) );\n  \n              gl_FragColor = vec4(col, 1.0);\n          }\n      `,\n  },\n  VHS: {\n    frag: GLSL`\n        precision highp float;\n        uniform sampler2D tex;\n        uniform float iTime;\n        varying vec2 uv;\n        \n        highp float rand(vec2 co)\n        {\n            highp float a = 12.9898;\n            highp float b = 78.233;\n            highp float c = 43758.5453;\n            highp float dt= dot(co.xy ,vec2(a,b));\n            highp float sn= mod(dt,3.14);\n            return fract(sin(sn) * c);\n        }\n      \n        void main()\n        {\n            highp float magnitude = 0.000003;\n        \n            // Set up offset\n            vec2 offsetRedUV = uv;\n            offsetRedUV.x = uv.x + rand(vec2(iTime*0.03,uv.y*0.42)) * 0.001;\n            offsetRedUV.x += sin(rand(vec2(iTime*0.2, uv.y)))*magnitude;\n            \n            vec2 offsetGreenUV = uv;\n            offsetGreenUV.x = uv.x + rand(vec2(iTime*0.004,uv.y*0.002)) * 0.004;\n            offsetGreenUV.x += sin(iTime*9.0)*magnitude;\n            \n            vec2 offsetBlueUV = uv;\n            offsetBlueUV.x = uv.y;\n            \n            // Load Texture\n            float r = texture2D(tex, offsetRedUV).r;\n            float g = texture2D(tex, offsetGreenUV).g;\n            float b = texture2D(tex, uv).b;\n            \n            gl_FragColor = vec4(r, g, b, 1.0);\n        }\n    `,\n  },\n});\n\nexport const ShaderMap = {\n  ORIGINAL: {\n    reference: \"\",\n    shader: shaders.ORIGINAL,\n  },\n  CRT: {\n    reference: \"[MattiasCRT](https://www.shadertoy.com/view/Ms23DR)\",\n    shader: shaders.CRT,\n  },\n  VHS: {\n    reference: \"[VHS Shader](https://www.shadertoy.com/view/MsK3zw)\",\n    shader: shaders.VHS,\n  },\n};\n","import React, {\n  Fragment,\n  useImperativeHandle,\n  forwardRef,\n  useState,\n  useContext,\n} from \"react\";\nimport { Node } from \"gl-react\";\nimport { Surface } from \"gl-react-dom\";\nimport { ShaderMap } from \"./Shaders\";\nimport { AppContext } from \"./App\";\nvar FileSaver = require(\"file-saver\");\n\nfunction Filter(props, ref) {\n  const { rawImage } = useContext(AppContext);\n  const [surface, setSurface] = useState(null);\n\n  useImperativeHandle(ref, () => ({\n    download: () => {\n      const data = surface.captureAsDataURL(\"image/jpeg\", 0.75);\n      FileSaver.saveAs(data, \"download.jpg\");\n    },\n  }));\n\n  return (\n    <Fragment>\n      <Surface\n        width={props.width}\n        height={props.height}\n        ref={(r) => setSurface(r)}\n        webglContextAttributes={{ preserveDrawingBuffer: true }}\n        pixelRatio={props.pixelRatio}\n      >\n        <Node\n          shader={ShaderMap[props.shaderName].shader}\n          uniforms={{\n            tex: rawImage,\n            iTime: 1.0,\n          }}\n        />\n      </Surface>\n    </Fragment>\n  );\n}\n\nexport default forwardRef(Filter);\n","import React, { Fragment, useState, useContext, useRef } from \"react\";\nimport {\n  InboxOutlined,\n  DownloadOutlined,\n  DeleteOutlined,\n} from \"@ant-design/icons\";\nimport { Upload, Button, Row, Col, Space } from \"antd\";\nimport Filter from \"./Filter\";\nimport { AppContext } from \"./App\";\nimport defaultImage from \"./default.jpg\";\n\nconst MAX_WIDTH = 800;\nconst MAX_HEIGHT = 600;\n\nexport default function FilterPage() {\n  const {\n    rawImage,\n    setRawImage,\n    width,\n    setWidth,\n    height,\n    setHeight,\n    curShader,\n  } = useContext(AppContext);\n\n  const [pixelRatio, setPixelRatio] = useState(1);\n  const filterRef = useRef();\n\n  handleImageLoaded(defaultImage);\n\n  function handleImageLoaded(base64) {\n    const image = new Image();\n    image.onload = () => {\n      const ratio = Math.max(\n        1,\n        image.width / MAX_WIDTH,\n        image.height / MAX_HEIGHT\n      );\n      setWidth(image.width);\n      setHeight(image.height);\n      setPixelRatio(ratio);\n      setRawImage(base64);\n    };\n    image.src = base64;\n  }\n\n  function handleBeforeUpload(file) {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (e) => {\n      handleImageLoaded(e.target.result);\n    };\n    return false;\n  }\n\n  function removeImage() {\n    setRawImage(null);\n  }\n\n  function renderBeforeUpload() {\n    return (\n      <Row justify=\"center\" align=\"middle\">\n        <Col span={16}>\n          <Upload.Dragger\n            name=\"file\"\n            multiple={false}\n            beforeUpload={handleBeforeUpload}\n            height={500}\n          >\n            <p className=\"ant-upload-drag-icon\">\n              <InboxOutlined />\n            </p>\n            <p className=\"ant-upload-text\">Click or drag file to this area</p>\n            <p className=\"ant-upload-hint\">\n              Your files won't be uploaded to any servers, they will only be\n              used locally.\n            </p>\n            <p className=\"ant-upload-hint\">Enjoy.</p>\n          </Upload.Dragger>\n        </Col>\n      </Row>\n    );\n  }\n\n  function renderUploaded() {\n    return (\n      <Fragment>\n        <Row justify=\"center\">\n          <Col>\n            <Filter\n              width={width / pixelRatio}\n              height={height / pixelRatio}\n              pixelRatio={pixelRatio}\n              shaderName={curShader}\n              ref={filterRef}\n            />\n          </Col>\n        </Row>\n        <Row justify=\"center\">\n          <Space>\n            <Button\n              onClick={removeImage}\n              type=\"primary\"\n              shape=\"round\"\n              size=\"large\"\n              icon={<DeleteOutlined />}\n            >\n              Remove\n            </Button>\n            <Button\n              onClick={() => filterRef.current.download()}\n              type=\"primary\"\n              shape=\"round\"\n              size=\"large\"\n              icon={<DownloadOutlined />}\n            >\n              Download\n            </Button>\n          </Space>\n        </Row>\n      </Fragment>\n    );\n  }\n\n  return (\n    <Fragment>{rawImage ? renderUploaded() : renderBeforeUpload()}</Fragment>\n  );\n}\n","import React, { Fragment, useState, useContext, useEffect } from \"react\";\nimport { Radio, Row, Col, Divider } from \"antd\";\nimport { AppContext } from \"./App\";\nimport { ShaderMap } from \"./Shaders\";\nimport Filter from \"./Filter\";\n\nconst MAX_WIDTH = 200;\nconst MAX_HEIGHT = 150;\n\nexport default function FilterSider() {\n  const { width, height, setCurShader } = useContext(AppContext);\n  const [pixelRatio, setPixelRatio] = useState(1);\n  const [selectedValue, setSelectedValue] = useState(0);\n\n  useEffect(() => {\n    setPixelRatio(Math.max(1, width / MAX_WIDTH, height / MAX_HEIGHT));\n  }, [width, height]);\n\n  function onChange(value) {\n    setSelectedValue(value);\n    setCurShader(Object.keys(ShaderMap)[value]);\n  }\n\n  return (\n    <Row justify=\"center\" align=\"middle\" gutter={[32, 32]}>\n      <Radio.Group\n        onChange={(e) => onChange(e.target.value)}\n        value={selectedValue}\n      >\n        {Object.keys(ShaderMap).map((shaderName, index) => {\n          return (\n            <Col key={index} onClick={() => onChange(index)} value={index}>\n              <Row justify=\"center\">\n                <Filter\n                  width={width / pixelRatio}\n                  height={height / pixelRatio}\n                  pixelRatio={pixelRatio}\n                  shaderName={shaderName}\n                />\n              </Row>\n              <Row justify=\"center\">\n                <Radio value={index}>{shaderName}</Radio>\n              </Row>\n            </Col>\n          );\n        })}\n      </Radio.Group>\n    </Row>\n  );\n}\n","import React, { useState } from \"react\";\nimport FilterPage from \"./FilterPage\";\nimport FilterSider from \"./FilterSider\";\nimport \"./App.less\";\nimport { Layout, Menu } from \"antd\";\nimport { CameraFilled } from \"@ant-design/icons\";\n\nconst { Header, Sider, Content, Footer } = Layout;\n\nexport const AppContext = React.createContext({});\n\nfunction App() {\n  const [rawImage, setRawImage] = useState(null);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [curShader, setCurShader] = useState(\"ORIGINAL\");\n\n  return (\n    <AppContext.Provider\n      value={{\n        rawImage,\n        setRawImage,\n        width,\n        setWidth,\n        height,\n        setHeight,\n        curShader,\n        setCurShader,\n      }}\n    >\n      <div className=\"App\">\n        <Layout className=\"layout\">\n          <Header>\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"1\"]}>\n              <Menu.Item key=\"1\" icon={<CameraFilled />}>\n                Old School Filter\n              </Menu.Item>\n            </Menu>\n          </Header>\n          <Layout>\n            <Content\n              style={{\n                padding: \"20px 20px\",\n                minHeight: document.documentElement.clientHeight - 134,\n              }}\n            >\n              <FilterPage />\n            </Content>\n            {rawImage ? (\n              <Sider\n                width={240}\n                style={{\n                  padding: \"20px 20px\",\n                }}\n              >\n                <FilterSider />\n              </Sider>\n            ) : null}\n          </Layout>\n          <Footer style={{ textAlign: \"center\" }}>\n            Old School Filter ©2020 Created by Wenduo Yue\n          </Footer>\n        </Layout>\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}